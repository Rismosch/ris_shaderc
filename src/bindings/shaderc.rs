#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
/* automatically generated by rust-bindgen 0.71.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const shaderc_target_env_shaderc_target_env_vulkan: shaderc_target_env = 0;
pub const shaderc_target_env_shaderc_target_env_opengl: shaderc_target_env = 1;
pub const shaderc_target_env_shaderc_target_env_opengl_compat: shaderc_target_env = 2;
pub const shaderc_target_env_shaderc_target_env_webgpu: shaderc_target_env = 3;
pub const shaderc_target_env_shaderc_target_env_default: shaderc_target_env = 0;
pub type shaderc_target_env = ::std::os::raw::c_int;
pub const shaderc_env_version_shaderc_env_version_vulkan_1_0: shaderc_env_version = 4194304;
pub const shaderc_env_version_shaderc_env_version_vulkan_1_1: shaderc_env_version = 4198400;
pub const shaderc_env_version_shaderc_env_version_vulkan_1_2: shaderc_env_version = 4202496;
pub const shaderc_env_version_shaderc_env_version_vulkan_1_3: shaderc_env_version = 4206592;
pub const shaderc_env_version_shaderc_env_version_vulkan_1_4: shaderc_env_version = 4210688;
pub const shaderc_env_version_shaderc_env_version_opengl_4_5: shaderc_env_version = 450;
pub const shaderc_env_version_shaderc_env_version_webgpu: shaderc_env_version = 451;
pub type shaderc_env_version = ::std::os::raw::c_int;
pub const shaderc_spirv_version_shaderc_spirv_version_1_0: shaderc_spirv_version = 65536;
pub const shaderc_spirv_version_shaderc_spirv_version_1_1: shaderc_spirv_version = 65792;
pub const shaderc_spirv_version_shaderc_spirv_version_1_2: shaderc_spirv_version = 66048;
pub const shaderc_spirv_version_shaderc_spirv_version_1_3: shaderc_spirv_version = 66304;
pub const shaderc_spirv_version_shaderc_spirv_version_1_4: shaderc_spirv_version = 66560;
pub const shaderc_spirv_version_shaderc_spirv_version_1_5: shaderc_spirv_version = 66816;
pub const shaderc_spirv_version_shaderc_spirv_version_1_6: shaderc_spirv_version = 67072;
pub type shaderc_spirv_version = ::std::os::raw::c_int;
pub const shaderc_compilation_status_shaderc_compilation_status_success:
    shaderc_compilation_status = 0;
pub const shaderc_compilation_status_shaderc_compilation_status_invalid_stage:
    shaderc_compilation_status = 1;
pub const shaderc_compilation_status_shaderc_compilation_status_compilation_error:
    shaderc_compilation_status = 2;
pub const shaderc_compilation_status_shaderc_compilation_status_internal_error:
    shaderc_compilation_status = 3;
pub const shaderc_compilation_status_shaderc_compilation_status_null_result_object:
    shaderc_compilation_status = 4;
pub const shaderc_compilation_status_shaderc_compilation_status_invalid_assembly:
    shaderc_compilation_status = 5;
pub const shaderc_compilation_status_shaderc_compilation_status_validation_error:
    shaderc_compilation_status = 6;
pub const shaderc_compilation_status_shaderc_compilation_status_transformation_error:
    shaderc_compilation_status = 7;
pub const shaderc_compilation_status_shaderc_compilation_status_configuration_error:
    shaderc_compilation_status = 8;
pub type shaderc_compilation_status = ::std::os::raw::c_int;
pub const shaderc_source_language_shaderc_source_language_glsl: shaderc_source_language = 0;
pub const shaderc_source_language_shaderc_source_language_hlsl: shaderc_source_language = 1;
pub type shaderc_source_language = ::std::os::raw::c_int;
pub const shaderc_shader_kind_shaderc_vertex_shader: shaderc_shader_kind = 0;
pub const shaderc_shader_kind_shaderc_fragment_shader: shaderc_shader_kind = 1;
pub const shaderc_shader_kind_shaderc_compute_shader: shaderc_shader_kind = 2;
pub const shaderc_shader_kind_shaderc_geometry_shader: shaderc_shader_kind = 3;
pub const shaderc_shader_kind_shaderc_tess_control_shader: shaderc_shader_kind = 4;
pub const shaderc_shader_kind_shaderc_tess_evaluation_shader: shaderc_shader_kind = 5;
pub const shaderc_shader_kind_shaderc_glsl_vertex_shader: shaderc_shader_kind = 0;
pub const shaderc_shader_kind_shaderc_glsl_fragment_shader: shaderc_shader_kind = 1;
pub const shaderc_shader_kind_shaderc_glsl_compute_shader: shaderc_shader_kind = 2;
pub const shaderc_shader_kind_shaderc_glsl_geometry_shader: shaderc_shader_kind = 3;
pub const shaderc_shader_kind_shaderc_glsl_tess_control_shader: shaderc_shader_kind = 4;
pub const shaderc_shader_kind_shaderc_glsl_tess_evaluation_shader: shaderc_shader_kind = 5;
pub const shaderc_shader_kind_shaderc_glsl_infer_from_source: shaderc_shader_kind = 6;
pub const shaderc_shader_kind_shaderc_glsl_default_vertex_shader: shaderc_shader_kind = 7;
pub const shaderc_shader_kind_shaderc_glsl_default_fragment_shader: shaderc_shader_kind = 8;
pub const shaderc_shader_kind_shaderc_glsl_default_compute_shader: shaderc_shader_kind = 9;
pub const shaderc_shader_kind_shaderc_glsl_default_geometry_shader: shaderc_shader_kind = 10;
pub const shaderc_shader_kind_shaderc_glsl_default_tess_control_shader: shaderc_shader_kind = 11;
pub const shaderc_shader_kind_shaderc_glsl_default_tess_evaluation_shader: shaderc_shader_kind = 12;
pub const shaderc_shader_kind_shaderc_spirv_assembly: shaderc_shader_kind = 13;
pub const shaderc_shader_kind_shaderc_raygen_shader: shaderc_shader_kind = 14;
pub const shaderc_shader_kind_shaderc_anyhit_shader: shaderc_shader_kind = 15;
pub const shaderc_shader_kind_shaderc_closesthit_shader: shaderc_shader_kind = 16;
pub const shaderc_shader_kind_shaderc_miss_shader: shaderc_shader_kind = 17;
pub const shaderc_shader_kind_shaderc_intersection_shader: shaderc_shader_kind = 18;
pub const shaderc_shader_kind_shaderc_callable_shader: shaderc_shader_kind = 19;
pub const shaderc_shader_kind_shaderc_glsl_raygen_shader: shaderc_shader_kind = 14;
pub const shaderc_shader_kind_shaderc_glsl_anyhit_shader: shaderc_shader_kind = 15;
pub const shaderc_shader_kind_shaderc_glsl_closesthit_shader: shaderc_shader_kind = 16;
pub const shaderc_shader_kind_shaderc_glsl_miss_shader: shaderc_shader_kind = 17;
pub const shaderc_shader_kind_shaderc_glsl_intersection_shader: shaderc_shader_kind = 18;
pub const shaderc_shader_kind_shaderc_glsl_callable_shader: shaderc_shader_kind = 19;
pub const shaderc_shader_kind_shaderc_glsl_default_raygen_shader: shaderc_shader_kind = 20;
pub const shaderc_shader_kind_shaderc_glsl_default_anyhit_shader: shaderc_shader_kind = 21;
pub const shaderc_shader_kind_shaderc_glsl_default_closesthit_shader: shaderc_shader_kind = 22;
pub const shaderc_shader_kind_shaderc_glsl_default_miss_shader: shaderc_shader_kind = 23;
pub const shaderc_shader_kind_shaderc_glsl_default_intersection_shader: shaderc_shader_kind = 24;
pub const shaderc_shader_kind_shaderc_glsl_default_callable_shader: shaderc_shader_kind = 25;
pub const shaderc_shader_kind_shaderc_task_shader: shaderc_shader_kind = 26;
pub const shaderc_shader_kind_shaderc_mesh_shader: shaderc_shader_kind = 27;
pub const shaderc_shader_kind_shaderc_glsl_task_shader: shaderc_shader_kind = 26;
pub const shaderc_shader_kind_shaderc_glsl_mesh_shader: shaderc_shader_kind = 27;
pub const shaderc_shader_kind_shaderc_glsl_default_task_shader: shaderc_shader_kind = 28;
pub const shaderc_shader_kind_shaderc_glsl_default_mesh_shader: shaderc_shader_kind = 29;
pub type shaderc_shader_kind = ::std::os::raw::c_int;
pub const shaderc_profile_shaderc_profile_none: shaderc_profile = 0;
pub const shaderc_profile_shaderc_profile_core: shaderc_profile = 1;
pub const shaderc_profile_shaderc_profile_compatibility: shaderc_profile = 2;
pub const shaderc_profile_shaderc_profile_es: shaderc_profile = 3;
pub type shaderc_profile = ::std::os::raw::c_int;
pub const shaderc_optimization_level_shaderc_optimization_level_zero: shaderc_optimization_level =
    0;
pub const shaderc_optimization_level_shaderc_optimization_level_size: shaderc_optimization_level =
    1;
pub const shaderc_optimization_level_shaderc_optimization_level_performance:
    shaderc_optimization_level = 2;
pub type shaderc_optimization_level = ::std::os::raw::c_int;
pub const shaderc_limit_shaderc_limit_max_lights: shaderc_limit = 0;
pub const shaderc_limit_shaderc_limit_max_clip_planes: shaderc_limit = 1;
pub const shaderc_limit_shaderc_limit_max_texture_units: shaderc_limit = 2;
pub const shaderc_limit_shaderc_limit_max_texture_coords: shaderc_limit = 3;
pub const shaderc_limit_shaderc_limit_max_vertex_attribs: shaderc_limit = 4;
pub const shaderc_limit_shaderc_limit_max_vertex_uniform_components: shaderc_limit = 5;
pub const shaderc_limit_shaderc_limit_max_varying_floats: shaderc_limit = 6;
pub const shaderc_limit_shaderc_limit_max_vertex_texture_image_units: shaderc_limit = 7;
pub const shaderc_limit_shaderc_limit_max_combined_texture_image_units: shaderc_limit = 8;
pub const shaderc_limit_shaderc_limit_max_texture_image_units: shaderc_limit = 9;
pub const shaderc_limit_shaderc_limit_max_fragment_uniform_components: shaderc_limit = 10;
pub const shaderc_limit_shaderc_limit_max_draw_buffers: shaderc_limit = 11;
pub const shaderc_limit_shaderc_limit_max_vertex_uniform_vectors: shaderc_limit = 12;
pub const shaderc_limit_shaderc_limit_max_varying_vectors: shaderc_limit = 13;
pub const shaderc_limit_shaderc_limit_max_fragment_uniform_vectors: shaderc_limit = 14;
pub const shaderc_limit_shaderc_limit_max_vertex_output_vectors: shaderc_limit = 15;
pub const shaderc_limit_shaderc_limit_max_fragment_input_vectors: shaderc_limit = 16;
pub const shaderc_limit_shaderc_limit_min_program_texel_offset: shaderc_limit = 17;
pub const shaderc_limit_shaderc_limit_max_program_texel_offset: shaderc_limit = 18;
pub const shaderc_limit_shaderc_limit_max_clip_distances: shaderc_limit = 19;
pub const shaderc_limit_shaderc_limit_max_compute_work_group_count_x: shaderc_limit = 20;
pub const shaderc_limit_shaderc_limit_max_compute_work_group_count_y: shaderc_limit = 21;
pub const shaderc_limit_shaderc_limit_max_compute_work_group_count_z: shaderc_limit = 22;
pub const shaderc_limit_shaderc_limit_max_compute_work_group_size_x: shaderc_limit = 23;
pub const shaderc_limit_shaderc_limit_max_compute_work_group_size_y: shaderc_limit = 24;
pub const shaderc_limit_shaderc_limit_max_compute_work_group_size_z: shaderc_limit = 25;
pub const shaderc_limit_shaderc_limit_max_compute_uniform_components: shaderc_limit = 26;
pub const shaderc_limit_shaderc_limit_max_compute_texture_image_units: shaderc_limit = 27;
pub const shaderc_limit_shaderc_limit_max_compute_image_uniforms: shaderc_limit = 28;
pub const shaderc_limit_shaderc_limit_max_compute_atomic_counters: shaderc_limit = 29;
pub const shaderc_limit_shaderc_limit_max_compute_atomic_counter_buffers: shaderc_limit = 30;
pub const shaderc_limit_shaderc_limit_max_varying_components: shaderc_limit = 31;
pub const shaderc_limit_shaderc_limit_max_vertex_output_components: shaderc_limit = 32;
pub const shaderc_limit_shaderc_limit_max_geometry_input_components: shaderc_limit = 33;
pub const shaderc_limit_shaderc_limit_max_geometry_output_components: shaderc_limit = 34;
pub const shaderc_limit_shaderc_limit_max_fragment_input_components: shaderc_limit = 35;
pub const shaderc_limit_shaderc_limit_max_image_units: shaderc_limit = 36;
pub const shaderc_limit_shaderc_limit_max_combined_image_units_and_fragment_outputs: shaderc_limit =
    37;
pub const shaderc_limit_shaderc_limit_max_combined_shader_output_resources: shaderc_limit = 38;
pub const shaderc_limit_shaderc_limit_max_image_samples: shaderc_limit = 39;
pub const shaderc_limit_shaderc_limit_max_vertex_image_uniforms: shaderc_limit = 40;
pub const shaderc_limit_shaderc_limit_max_tess_control_image_uniforms: shaderc_limit = 41;
pub const shaderc_limit_shaderc_limit_max_tess_evaluation_image_uniforms: shaderc_limit = 42;
pub const shaderc_limit_shaderc_limit_max_geometry_image_uniforms: shaderc_limit = 43;
pub const shaderc_limit_shaderc_limit_max_fragment_image_uniforms: shaderc_limit = 44;
pub const shaderc_limit_shaderc_limit_max_combined_image_uniforms: shaderc_limit = 45;
pub const shaderc_limit_shaderc_limit_max_geometry_texture_image_units: shaderc_limit = 46;
pub const shaderc_limit_shaderc_limit_max_geometry_output_vertices: shaderc_limit = 47;
pub const shaderc_limit_shaderc_limit_max_geometry_total_output_components: shaderc_limit = 48;
pub const shaderc_limit_shaderc_limit_max_geometry_uniform_components: shaderc_limit = 49;
pub const shaderc_limit_shaderc_limit_max_geometry_varying_components: shaderc_limit = 50;
pub const shaderc_limit_shaderc_limit_max_tess_control_input_components: shaderc_limit = 51;
pub const shaderc_limit_shaderc_limit_max_tess_control_output_components: shaderc_limit = 52;
pub const shaderc_limit_shaderc_limit_max_tess_control_texture_image_units: shaderc_limit = 53;
pub const shaderc_limit_shaderc_limit_max_tess_control_uniform_components: shaderc_limit = 54;
pub const shaderc_limit_shaderc_limit_max_tess_control_total_output_components: shaderc_limit = 55;
pub const shaderc_limit_shaderc_limit_max_tess_evaluation_input_components: shaderc_limit = 56;
pub const shaderc_limit_shaderc_limit_max_tess_evaluation_output_components: shaderc_limit = 57;
pub const shaderc_limit_shaderc_limit_max_tess_evaluation_texture_image_units: shaderc_limit = 58;
pub const shaderc_limit_shaderc_limit_max_tess_evaluation_uniform_components: shaderc_limit = 59;
pub const shaderc_limit_shaderc_limit_max_tess_patch_components: shaderc_limit = 60;
pub const shaderc_limit_shaderc_limit_max_patch_vertices: shaderc_limit = 61;
pub const shaderc_limit_shaderc_limit_max_tess_gen_level: shaderc_limit = 62;
pub const shaderc_limit_shaderc_limit_max_viewports: shaderc_limit = 63;
pub const shaderc_limit_shaderc_limit_max_vertex_atomic_counters: shaderc_limit = 64;
pub const shaderc_limit_shaderc_limit_max_tess_control_atomic_counters: shaderc_limit = 65;
pub const shaderc_limit_shaderc_limit_max_tess_evaluation_atomic_counters: shaderc_limit = 66;
pub const shaderc_limit_shaderc_limit_max_geometry_atomic_counters: shaderc_limit = 67;
pub const shaderc_limit_shaderc_limit_max_fragment_atomic_counters: shaderc_limit = 68;
pub const shaderc_limit_shaderc_limit_max_combined_atomic_counters: shaderc_limit = 69;
pub const shaderc_limit_shaderc_limit_max_atomic_counter_bindings: shaderc_limit = 70;
pub const shaderc_limit_shaderc_limit_max_vertex_atomic_counter_buffers: shaderc_limit = 71;
pub const shaderc_limit_shaderc_limit_max_tess_control_atomic_counter_buffers: shaderc_limit = 72;
pub const shaderc_limit_shaderc_limit_max_tess_evaluation_atomic_counter_buffers: shaderc_limit =
    73;
pub const shaderc_limit_shaderc_limit_max_geometry_atomic_counter_buffers: shaderc_limit = 74;
pub const shaderc_limit_shaderc_limit_max_fragment_atomic_counter_buffers: shaderc_limit = 75;
pub const shaderc_limit_shaderc_limit_max_combined_atomic_counter_buffers: shaderc_limit = 76;
pub const shaderc_limit_shaderc_limit_max_atomic_counter_buffer_size: shaderc_limit = 77;
pub const shaderc_limit_shaderc_limit_max_transform_feedback_buffers: shaderc_limit = 78;
pub const shaderc_limit_shaderc_limit_max_transform_feedback_interleaved_components: shaderc_limit =
    79;
pub const shaderc_limit_shaderc_limit_max_cull_distances: shaderc_limit = 80;
pub const shaderc_limit_shaderc_limit_max_combined_clip_and_cull_distances: shaderc_limit = 81;
pub const shaderc_limit_shaderc_limit_max_samples: shaderc_limit = 82;
pub const shaderc_limit_shaderc_limit_max_mesh_output_vertices_nv: shaderc_limit = 83;
pub const shaderc_limit_shaderc_limit_max_mesh_output_primitives_nv: shaderc_limit = 84;
pub const shaderc_limit_shaderc_limit_max_mesh_work_group_size_x_nv: shaderc_limit = 85;
pub const shaderc_limit_shaderc_limit_max_mesh_work_group_size_y_nv: shaderc_limit = 86;
pub const shaderc_limit_shaderc_limit_max_mesh_work_group_size_z_nv: shaderc_limit = 87;
pub const shaderc_limit_shaderc_limit_max_task_work_group_size_x_nv: shaderc_limit = 88;
pub const shaderc_limit_shaderc_limit_max_task_work_group_size_y_nv: shaderc_limit = 89;
pub const shaderc_limit_shaderc_limit_max_task_work_group_size_z_nv: shaderc_limit = 90;
pub const shaderc_limit_shaderc_limit_max_mesh_view_count_nv: shaderc_limit = 91;
pub const shaderc_limit_shaderc_limit_max_mesh_output_vertices_ext: shaderc_limit = 92;
pub const shaderc_limit_shaderc_limit_max_mesh_output_primitives_ext: shaderc_limit = 93;
pub const shaderc_limit_shaderc_limit_max_mesh_work_group_size_x_ext: shaderc_limit = 94;
pub const shaderc_limit_shaderc_limit_max_mesh_work_group_size_y_ext: shaderc_limit = 95;
pub const shaderc_limit_shaderc_limit_max_mesh_work_group_size_z_ext: shaderc_limit = 96;
pub const shaderc_limit_shaderc_limit_max_task_work_group_size_x_ext: shaderc_limit = 97;
pub const shaderc_limit_shaderc_limit_max_task_work_group_size_y_ext: shaderc_limit = 98;
pub const shaderc_limit_shaderc_limit_max_task_work_group_size_z_ext: shaderc_limit = 99;
pub const shaderc_limit_shaderc_limit_max_mesh_view_count_ext: shaderc_limit = 100;
pub const shaderc_limit_shaderc_limit_max_dual_source_draw_buffers_ext: shaderc_limit = 101;
pub type shaderc_limit = ::std::os::raw::c_int;
pub const shaderc_uniform_kind_shaderc_uniform_kind_image: shaderc_uniform_kind = 0;
pub const shaderc_uniform_kind_shaderc_uniform_kind_sampler: shaderc_uniform_kind = 1;
pub const shaderc_uniform_kind_shaderc_uniform_kind_texture: shaderc_uniform_kind = 2;
pub const shaderc_uniform_kind_shaderc_uniform_kind_buffer: shaderc_uniform_kind = 3;
pub const shaderc_uniform_kind_shaderc_uniform_kind_storage_buffer: shaderc_uniform_kind = 4;
pub const shaderc_uniform_kind_shaderc_uniform_kind_unordered_access_view: shaderc_uniform_kind = 5;
pub type shaderc_uniform_kind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shaderc_compiler {
    _unused: [u8; 0],
}
pub type shaderc_compiler_t = *mut shaderc_compiler;
extern "C" {
    pub fn shaderc_compiler_initialize() -> shaderc_compiler_t;
}
extern "C" {
    pub fn shaderc_compiler_release(arg1: shaderc_compiler_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shaderc_compile_options {
    _unused: [u8; 0],
}
pub type shaderc_compile_options_t = *mut shaderc_compile_options;
extern "C" {
    pub fn shaderc_compile_options_initialize() -> shaderc_compile_options_t;
}
extern "C" {
    pub fn shaderc_compile_options_clone(
        options: shaderc_compile_options_t,
    ) -> shaderc_compile_options_t;
}
extern "C" {
    pub fn shaderc_compile_options_release(options: shaderc_compile_options_t);
}
extern "C" {
    pub fn shaderc_compile_options_add_macro_definition(
        options: shaderc_compile_options_t,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_source_language(
        options: shaderc_compile_options_t,
        lang: shaderc_source_language,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_generate_debug_info(options: shaderc_compile_options_t);
}
extern "C" {
    pub fn shaderc_compile_options_set_optimization_level(
        options: shaderc_compile_options_t,
        level: shaderc_optimization_level,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_forced_version_profile(
        options: shaderc_compile_options_t,
        version: ::std::os::raw::c_int,
        profile: shaderc_profile,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shaderc_include_result {
    pub source_name: *const ::std::os::raw::c_char,
    pub source_name_length: usize,
    pub content: *const ::std::os::raw::c_char,
    pub content_length: usize,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shaderc_include_result"][::std::mem::size_of::<shaderc_include_result>() - 40usize];
    ["Alignment of shaderc_include_result"]
        [::std::mem::align_of::<shaderc_include_result>() - 8usize];
    ["Offset of field: shaderc_include_result::source_name"]
        [::std::mem::offset_of!(shaderc_include_result, source_name) - 0usize];
    ["Offset of field: shaderc_include_result::source_name_length"]
        [::std::mem::offset_of!(shaderc_include_result, source_name_length) - 8usize];
    ["Offset of field: shaderc_include_result::content"]
        [::std::mem::offset_of!(shaderc_include_result, content) - 16usize];
    ["Offset of field: shaderc_include_result::content_length"]
        [::std::mem::offset_of!(shaderc_include_result, content_length) - 24usize];
    ["Offset of field: shaderc_include_result::user_data"]
        [::std::mem::offset_of!(shaderc_include_result, user_data) - 32usize];
};
pub const shaderc_include_type_shaderc_include_type_relative: shaderc_include_type = 0;
pub const shaderc_include_type_shaderc_include_type_standard: shaderc_include_type = 1;
pub type shaderc_include_type = ::std::os::raw::c_int;
pub type shaderc_include_resolve_fn = ::std::option::Option<
    extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        requested_source: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        requesting_source: *const ::std::os::raw::c_char,
        include_depth: usize,
    ) -> *mut shaderc_include_result,
>;
pub type shaderc_include_result_release_fn = ::std::option::Option<
    extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        include_result: *mut shaderc_include_result,
    ),
>;
extern "C" {
    pub fn shaderc_compile_options_set_include_callbacks(
        options: shaderc_compile_options_t,
        resolver: shaderc_include_resolve_fn,
        result_releaser: shaderc_include_result_release_fn,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_suppress_warnings(options: shaderc_compile_options_t);
}
extern "C" {
    pub fn shaderc_compile_options_set_target_env(
        options: shaderc_compile_options_t,
        target: shaderc_target_env,
        version: u32,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_target_spirv(
        options: shaderc_compile_options_t,
        version: shaderc_spirv_version,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_warnings_as_errors(options: shaderc_compile_options_t);
}
extern "C" {
    pub fn shaderc_compile_options_set_limit(
        options: shaderc_compile_options_t,
        limit: shaderc_limit,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_auto_bind_uniforms(
        options: shaderc_compile_options_t,
        auto_bind: bool,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_auto_combined_image_sampler(
        options: shaderc_compile_options_t,
        upgrade: bool,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_hlsl_io_mapping(
        options: shaderc_compile_options_t,
        hlsl_iomap: bool,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_hlsl_offsets(
        options: shaderc_compile_options_t,
        hlsl_offsets: bool,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_binding_base(
        options: shaderc_compile_options_t,
        kind: shaderc_uniform_kind,
        base: u32,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_binding_base_for_stage(
        options: shaderc_compile_options_t,
        shader_kind: shaderc_shader_kind,
        kind: shaderc_uniform_kind,
        base: u32,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_preserve_bindings(
        options: shaderc_compile_options_t,
        preserve_bindings: bool,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_auto_map_locations(
        options: shaderc_compile_options_t,
        auto_map: bool,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage(
        options: shaderc_compile_options_t,
        shader_kind: shaderc_shader_kind,
        reg: *const ::std::os::raw::c_char,
        set: *const ::std::os::raw::c_char,
        binding: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_hlsl_register_set_and_binding(
        options: shaderc_compile_options_t,
        reg: *const ::std::os::raw::c_char,
        set: *const ::std::os::raw::c_char,
        binding: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_hlsl_functionality1(
        options: shaderc_compile_options_t,
        enable: bool,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_hlsl_16bit_types(
        options: shaderc_compile_options_t,
        enable: bool,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_vulkan_rules_relaxed(
        options: shaderc_compile_options_t,
        enable: bool,
    );
}
extern "C" {
    pub fn shaderc_compile_options_set_invert_y(options: shaderc_compile_options_t, enable: bool);
}
extern "C" {
    pub fn shaderc_compile_options_set_nan_clamp(options: shaderc_compile_options_t, enable: bool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shaderc_compilation_result {
    _unused: [u8; 0],
}
pub type shaderc_compilation_result_t = *mut shaderc_compilation_result;
extern "C" {
    pub fn shaderc_compile_into_spv(
        compiler: shaderc_compiler_t,
        source_text: *const ::std::os::raw::c_char,
        source_text_size: usize,
        shader_kind: shaderc_shader_kind,
        input_file_name: *const ::std::os::raw::c_char,
        entry_point_name: *const ::std::os::raw::c_char,
        additional_options: shaderc_compile_options_t,
    ) -> shaderc_compilation_result_t;
}
extern "C" {
    pub fn shaderc_compile_into_spv_assembly(
        compiler: shaderc_compiler_t,
        source_text: *const ::std::os::raw::c_char,
        source_text_size: usize,
        shader_kind: shaderc_shader_kind,
        input_file_name: *const ::std::os::raw::c_char,
        entry_point_name: *const ::std::os::raw::c_char,
        additional_options: shaderc_compile_options_t,
    ) -> shaderc_compilation_result_t;
}
extern "C" {
    pub fn shaderc_compile_into_preprocessed_text(
        compiler: shaderc_compiler_t,
        source_text: *const ::std::os::raw::c_char,
        source_text_size: usize,
        shader_kind: shaderc_shader_kind,
        input_file_name: *const ::std::os::raw::c_char,
        entry_point_name: *const ::std::os::raw::c_char,
        additional_options: shaderc_compile_options_t,
    ) -> shaderc_compilation_result_t;
}
extern "C" {
    pub fn shaderc_assemble_into_spv(
        compiler: shaderc_compiler_t,
        source_assembly: *const ::std::os::raw::c_char,
        source_assembly_size: usize,
        additional_options: shaderc_compile_options_t,
    ) -> shaderc_compilation_result_t;
}
extern "C" {
    pub fn shaderc_result_release(result: shaderc_compilation_result_t);
}
extern "C" {
    pub fn shaderc_result_get_length(result: shaderc_compilation_result_t) -> usize;
}
extern "C" {
    pub fn shaderc_result_get_num_warnings(result: shaderc_compilation_result_t) -> usize;
}
extern "C" {
    pub fn shaderc_result_get_num_errors(result: shaderc_compilation_result_t) -> usize;
}
extern "C" {
    pub fn shaderc_result_get_compilation_status(
        arg1: shaderc_compilation_result_t,
    ) -> shaderc_compilation_status;
}
extern "C" {
    pub fn shaderc_result_get_bytes(
        result: shaderc_compilation_result_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn shaderc_result_get_error_message(
        result: shaderc_compilation_result_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn shaderc_get_spv_version(
        version: *mut ::std::os::raw::c_uint,
        revision: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn shaderc_parse_version_profile(
        str_: *const ::std::os::raw::c_char,
        version: *mut ::std::os::raw::c_int,
        profile: *mut shaderc_profile,
    ) -> bool;
}
